Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\.env
Código:
VITE_API_URL=http://localhost:5006 

Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\.env.production
Código:
VITE_API_URL=https://caja-om.estudiobeguier.com:5006 

Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\.gitignore
Código:
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules

dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\backend\.env
Código:
PORT=5006
MONGO_URI=mongodb+srv://aabeguier:FlujoCajaOdontomed1235813@cluster0.xx1m0.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
FRONTEND_URL=https://caja-om.estudiobeguier.com

Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\backend\models\Ingreso.js
Código:
import mongoose from "mongoose";

const ingresoSchema = new mongoose.Schema(
  {
    fecha: {
      type: Date,
      required: true,
      default: Date.now,
    },
    importe: {
      type: Number,
      required: true,
    },
    categoria: {
      codigo: {
        type: String,
        required: true,
      },
      nombre: {
        type: String,
        required: true,
      },
      rutaCategoria: [
        {
          codigo: String,
          nombre: String,
        },
      ],
    },
  },
  {
    timestamps: true,
  }
);

const Ingreso = mongoose.model("Ingreso", ingresoSchema);

export default Ingreso;


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\backend\models\IngresoCategoria.js
Código:
import mongoose from "mongoose";

const ingresoCategoriaSchema = new mongoose.Schema(
  {
    codigo: {
      type: String,
      required: true,
      unique: true,
    },
    nombre: {
      type: String,
      required: true,
    },
    nivel: {
      type: Number,
      required: true,
    },
    categoriaPadre: {
      type: String,
      default: null,
    },
  },
  {
    timestamps: true,
  }
);

const IngresoCategoria = mongoose.model(
  "IngresoCategoria",
  ingresoCategoriaSchema
);

export default IngresoCategoria;


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\backend\package.json
Código:
{
  "name": "flujodecajaodontomed-backend",
  "version": "1.0.0",
  "type": "module",
  "main": "server.js",
  "license": "MIT",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "mongoose": "^7.0.3"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\backend\routes\ingresos.js
Código:
import express from "express";
import Ingreso from "../models/Ingreso.js";

const router = express.Router();

router.post("/", async (req, res) => {
  try {
    const ingreso = new Ingreso({
      fecha: req.body.fecha,
      importe: req.body.importe,
      categoria: {
        codigo: req.body.categoria.codigo,
        nombre: req.body.categoria.nombre,
        rutaCategoria: req.body.categoria.rutaCategoria,
      },
    });

    const nuevoIngreso = await ingreso.save();
    res.status(201).json(nuevoIngreso);
  } catch (error) {
    res.status(400).json({
      mensaje: "Error al guardar el ingreso",
      error: error.message,
    });
  }
});

export default router;


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\backend\routes\ingresosCategorias.js
Código:
import express from "express";
import IngresoCategoria from "../models/IngresoCategoria.js";

const router = express.Router();

// Obtener todas las categorías
router.get("/", async (req, res) => {
  try {
    const categorias = await IngresoCategoria.find();
    res.json(categorias);
  } catch (error) {
    res.status(500).json({ mensaje: error.message });
  }
});

// Crear nueva categoría
router.post("/", async (req, res) => {
  const categoria = new IngresoCategoria({
    codigo: req.body.codigo,
    nombre: req.body.nombre,
    nivel: req.body.nivel,
    categoriaPadre: req.body.categoriaPadre,
  });

  try {
    const nuevaCategoria = await categoria.save();
    res.status(201).json(nuevaCategoria);
  } catch (error) {
    res.status(400).json({ mensaje: error.message });
  }
});

export default router;


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\backend\server.js
Código:
import express from "express";
import mongoose from "mongoose";
import dotenv from "dotenv";
import cors from "cors";
import ingresosCategoriasRoutes from "./routes/ingresosCategorias.js";
import ingresosRoutes from "./routes/ingresos.js";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5006;

app.use(cors({
  origin: process.env.FRONTEND_URL || 'https://caja-om.estudiobeguier.com',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());

const mongoURI =
    process.env.MONGO_URI || "mongodb://localhost:27017/FlujoDeCajaOdontomed";
mongoose
    .connect(mongoURI)
    .then(() => console.log("Conexión exitosa a MongoDB"))
    .catch((error) =>
        console.error("Error al conectar a MongoDB:", error.message)
    );

app.use("/api/categorias-ingresos", ingresosCategoriasRoutes);
app.use("/api/ingresos", ingresosRoutes);

app.get("/", (req, res) => {
    res.json({ mensaje: "Servidor funcionando correctamente" });
});

app.use((req, res) => {
    res.status(404).json({ mensaje: "Ruta no encontrada" });
});

app.listen(PORT, () => {
    console.log(`Servidor escuchando en el puerto ${PORT}`);
});

Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\eslint.config.js
Código:
import js from "@eslint/js";
import globals from "globals";
import react from "eslint-plugin-react";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";

export default [
  { ignores: ["dist"] }, // Ignora la carpeta de salida
  {
    files: ["**/*.{js,jsx}"], // Aplica reglas a archivos JS y JSX
    languageOptions: {
      ecmaVersion: 2020,
      globals: {
        ...globals.browser, // Soporte para el entorno del navegador
        ...globals.node, // Soporte para el entorno de Node.js
      },
      parserOptions: {
        ecmaVersion: "latest",
        ecmaFeatures: { jsx: true },
        sourceType: "module",
      },
    },
    settings: { react: { version: "18.3" } }, // Configuración para React
    plugins: {
      react,
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules, // Reglas recomendadas para JS
      ...react.configs.recommended.rules, // Reglas recomendadas para React
      ...react.configs["jsx-runtime"].rules, // Reglas para el runtime de JSX
      ...reactHooks.configs.recommended.rules, // Reglas recomendadas para React Hooks
      "react/jsx-no-target-blank": "off",
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "no-undef": "off", // Evita errores en variables globales como `process`
    },
  },
];


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\generateFileList.mjs
Código:
import fs from 'fs';
import path from 'path';

// Lista de extensiones de archivos multimedia a excluir
const mediaExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg', '.mp3', '.wav', '.ogg', '.mp4', '.avi', '.mov', '.mkv', '.flv', '.ico', '.webm'];

// Función para recorrer el directorio de manera recursiva
function getFilesRecursively(dir, excludedDirs, excludedFiles, fileList = []) {
  const files = fs.readdirSync(dir);  // Lee el contenido del directorio

  files.forEach(file => {
    const filePath = path.join(dir, file); // Genera la ruta completa del archivo
    const stats = fs.statSync(filePath);  // Obtiene la información del archivo

    // Si es un directorio, lo recorre
    if (stats.isDirectory()) {
      if (!excludedDirs.includes(file)) {
        getFilesRecursively(filePath, excludedDirs, excludedFiles, fileList); // Recursión
      }
    } else {
      // Si el archivo no está en la lista de excluidos y no es un archivo multimedia
      const fileExt = path.extname(file).toLowerCase(); // Obtener la extensión del archivo

      if (!excludedFiles.includes(file) && !mediaExtensions.includes(fileExt)) {
        fileList.push(filePath);
      }
    }
  });

  return fileList;
}

// Función para leer el contenido de un archivo
function getFileContent(filePath) {
  return fs.readFileSync(filePath, 'utf-8');
}

// Función principal para generar el archivo de salida
function generateFileList(outputFile) {
  const excludedDirs = ['node_modules', 'dist', '.github', '.git'];  // Carpetas a excluir
  const excludedFiles = ['package-lock.json', 'yarn.lock', 'README.md']; // Archivos a excluir
  const projectDir = process.cwd();  // Directorio actual
  const files = getFilesRecursively(projectDir, excludedDirs, excludedFiles);

  let outputData = '';

  // Recopilación de datos y contenido de archivos
  files.forEach(filePath => {
    const fileContent = getFileContent(filePath);
    outputData += `Archivo: ${filePath}\nCódigo:\n${fileContent}\n\n`;
  });

  // Escribir el archivo de salida
  fs.writeFileSync(outputFile, outputData);
  console.log(`Se generó el archivo: ${outputFile}`);
}

// Llamada para generar el archivo de salida
generateFileList('output.txt');


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\index.html
Código:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/EstudioIcono256x256.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Estudio Beguier</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\package.json
Código:
{
  "name": "flujodecajaodontomed",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/material": "^6.2.0",
    "@popperjs/core": "^2.11.8",
    "bootstrap": "^5.3.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "lucide-react": "^0.468.0",
    "mongoose": "^8.8.4",
    "prop-types": "^15.8.1",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.6",
    "react-dom": "^18.3.1",
    "react-icons": "^5.4.0",
    "react-number-format": "^5.4.2",
    "react-router-dom": "^7.0.2",
    "sass": "^1.83.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.16.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "^6.0.1"
  }
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\public\_redirects
Código:
/*    /index.html   200

Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\App.jsx
Código:
import "./App.scss";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { NavBar } from "./components/NavBar";
import { Footer } from "./components/Footer";
import { PaginaInicial } from "./components/PaginaInicial";
import { Ingresos } from "./components/ingresos/Ingresos";
import { GestionCategorias } from "./components/ingresos/categorias/GestionCategorias";
import { RegistroIngresos } from "./components/ingresos/registro/RegistroIngresos";
function App() {
  return (
    <Router>
      <NavBar />
      <Routes>
        {/* Ruta para el componente página inicial */}
        <Route path="/" element={<PaginaInicial />} />

        {/* Ruta para el componente Ingresos */}
        <Route path="/ingresos" element={<Ingresos />} />
        {/* Ruta para el componente Agregar catagorias de ingresos  */}
        <Route path="/agregar-ingresos" element={<GestionCategorias />} />
        {/* Ruta para el componente para registar ingresos */}
        <Route path="/registar-ingresos" element={<RegistroIngresos />} />
      </Routes>
      <Footer />
    </Router>
  );
}

export default App;


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\App.scss
Código:
@use "./styles/variables" as var;

* {
  margin: 0px;
  padding: 0px;
  background-color: var.$color-fondo-estudio;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\comunes\EntradaFecha.jsx
Código:
import PropTypes from "prop-types";
import "./EntradaFecha.scss";

export const EntradaFecha = ({ id, valor, alCambiar, requerido = false }) => {
  return (
    <input
      type="date"
      id={id}
      value={valor}
      onChange={(e) => alCambiar(e.target.value)}
      required={requerido}
      className="entrada-fecha"
    />
  );
};

EntradaFecha.propTypes = {
  id: PropTypes.string.isRequired,
  valor: PropTypes.string.isRequired,
  alCambiar: PropTypes.func.isRequired,
  requerido: PropTypes.bool,
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\comunes\EntradaFecha.scss
Código:
@use "../../styles/variables" as var;

.entrada-fecha {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  background-color: #fff;
  cursor: pointer;
  padding-right: 30px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 8px center;
  background-size: 16px;
}

.entrada-fecha:focus {
  border-color: var.$color-principal-cliente;
  outline: none;
  box-shadow: 0 0 0 2px rgba(64, 181, 166, 0.2);
}

.entrada-fecha::-webkit-calendar-picker-indicator {
  opacity: 0;
  cursor: pointer;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  height: 100%;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\comunes\EntradaMonetaria.jsx
Código:
import PropTypes from "prop-types";
import { NumericFormat } from "react-number-format";
import "./EntradaMonetaria.scss";

export const EntradaMonetaria = ({
  valor,
  alCambiar,
  placeholder = "0,00",
}) => {
  return (
    <NumericFormat
      value={valor}
      onValueChange={(values) => {
        alCambiar(values.value);
      }}
      thousandSeparator="."
      decimalSeparator=","
      decimalScale={2}
      fixedDecimalScale
      allowNegative={false}
      placeholder={placeholder}
      className="entrada-monetaria"
    />
  );
};

EntradaMonetaria.propTypes = {
  valor: PropTypes.string.isRequired,
  alCambiar: PropTypes.func.isRequired,
  placeholder: PropTypes.string,
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\comunes\EntradaMonetaria.scss
Código:
@use "../../styles/variables" as var;

.entrada-monetaria {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  text-align: right;
  background-color: #fff;
}

.entrada-monetaria:focus {
  border-color: var.$color-principal-cliente;
  outline: none;
  box-shadow: 1px 1px 1px 2px rgba(64, 181, 166, 0.2);
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\Footer.jsx
Código:
import "../styles/Footer.scss";

export function Footer() {
  return (
    <>
      <div className="footer-container">
        <br />

        <div className="parrafo-footer">
          © Todos los derechos reservados - A<sup>2</sup>B Systems
        </div>
        <img
          className="img-footer"
          src="/EstudioIcono64x64.png"
          alt="estudio"
        />
        <div className="parrafo-footer">Estudio Beguier</div>
        <br />
      </div>
    </>
  );
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\FormFields.jsx
Código:
import PropTypes from "prop-types";
import { useState, useEffect, useCallback } from "react";
import "./FormFields.scss";

export const FormFields = ({ formData, handleChange, categorias }) => {
  const [siguienteCodigo, setSiguienteCodigo] = useState("");
  const [categoriasNivel, setCategoriasNivel] = useState([]);
  const [rutaNavegacion, setRutaNavegacion] = useState([]);

  const actualizarCodigo = useCallback(
    (nuevoCodigo) => {
      setSiguienteCodigo(nuevoCodigo);
      if (formData.codigo !== nuevoCodigo) {
        handleChange({
          target: {
            name: "codigo",
            value: nuevoCodigo,
          },
        });
      }
    },
    [formData.codigo, handleChange]
  );

  useEffect(() => {
    // Actualizar ruta de navegación
    if (formData.categoriaPadre) {
      const ruta = [];
      let categoriaActual = categorias.find(
        (c) => c.codigo === formData.categoriaPadre
      );

      while (categoriaActual) {
        ruta.unshift(categoriaActual);
        categoriaActual = categorias.find(
          (c) => c.codigo === categoriaActual.categoriaPadre
        );
      }

      setRutaNavegacion(ruta);
    } else {
      setRutaNavegacion([]);
    }

    // Generar siguiente código
    if (formData.categoriaPadre) {
      const categoriaPadre = categorias.find(
        (c) => c.codigo === formData.categoriaPadre
      );
      if (categoriaPadre) {
        const subcategorias = categorias.filter(
          (c) => c.categoriaPadre === formData.categoriaPadre
        );
        const ultimoNumero =
          subcategorias.length > 0
            ? Math.max(
                ...subcategorias.map((c) => parseInt(c.codigo.split(".").pop()))
              )
            : 0;
        const nuevoCodigo = `${categoriaPadre.codigo}.${ultimoNumero + 1}`;
        actualizarCodigo(nuevoCodigo);
      }
    } else {
      const categoriasNivel1 = categorias.filter((c) => !c.categoriaPadre);
      const ultimoNumero =
        categoriasNivel1.length > 0
          ? Math.max(...categoriasNivel1.map((c) => parseInt(c.codigo)))
          : 0;
      const nuevoCodigo = `${ultimoNumero + 1}`;
      actualizarCodigo(nuevoCodigo);
    }

    // Actualizar lista de categorías del nivel actual
    const categoriasDelNivel = categorias.filter((c) =>
      formData.categoriaPadre
        ? c.categoriaPadre === formData.categoriaPadre
        : !c.categoriaPadre
    );
    setCategoriasNivel(categoriasDelNivel);
  }, [formData.categoriaPadre, categorias, actualizarCodigo]);

  const handleAgregarSubcategoria = (categoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: categoria.codigo,
      },
    });
  };

  const handleNavegar = (categoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: categoria.codigo,
      },
    });
  };

  const mostrarSubcategorias = (categoria) => {
    const subcategorias = categorias.filter(
      (c) => c.categoriaPadre === categoria.codigo
    );
    return (
      subcategorias.length > 0 && (
        <ul className="lista-subcategorias">
          {subcategorias.map((subcat) => (
            <li key={subcat._id} className="subcategoria-item">
              <div className="categoria-info">
                <span className="categoria-codigo">{subcat.codigo}</span>
                <span className="categoria-nombre">{subcat.nombre}</span>
              </div>
              <div className="categoria-acciones">
                <button
                  type="button"
                  onClick={() => handleNavegar(subcat)}
                  className="btn-navegar"
                >
                  Ver subcategorías
                </button>
                <button
                  type="button"
                  onClick={() => handleAgregarSubcategoria(subcat)}
                  className="btn-agregar-subcategoria"
                >
                  + Agregar Subcategoría
                </button>
              </div>
            </li>
          ))}
        </ul>
      )
    );
  };

  return (
    <div className="form-fields-container">
      {rutaNavegacion.length > 0 && (
        <div className="ruta-navegacion">
          <button
            type="button"
            onClick={() =>
              handleChange({
                target: { name: "categoriaPadre", value: "" },
              })
            }
            className="btn-navegacion"
          >
            Inicio
          </button>
          {rutaNavegacion.map((cat) => (
            <span key={cat._id}>
              <span className="separador-ruta">›</span>
              <button
                type="button"
                onClick={() => handleNavegar(cat)}
                className="btn-navegacion"
              >
                {cat.nombre}
              </button>
            </span>
          ))}
        </div>
      )}

      <div className="form-group">
        <input
          type="text"
          name="nombre"
          value={formData.nombre}
          onChange={handleChange}
          className="form-input"
          placeholder="Nombre de la categoría"
          required
        />
        <div className="codigo-sugerido">Código: {siguienteCodigo}</div>
      </div>

      {categoriasNivel.length > 0 && (
        <div className="categorias-nivel">
          <ul className="lista-categorias">
            {categoriasNivel.map((categoria) => (
              <li key={categoria._id} className="categoria-item">
                <div className="categoria-info">
                  <span className="categoria-codigo">{categoria.codigo}</span>
                  <span className="categoria-nombre">{categoria.nombre}</span>
                </div>
                <div className="categoria-acciones">
                  <button
                    type="button"
                    onClick={() => handleAgregarSubcategoria(categoria)}
                    className="btn-agregar-subcategoria"
                  >
                    + Agregar Subcategoría
                  </button>
                </div>
                {mostrarSubcategorias(categoria)}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

FormFields.propTypes = {
  formData: PropTypes.shape({
    codigo: PropTypes.string,
    nombre: PropTypes.string.isRequired,
    nivel: PropTypes.number,
    categoriaPadre: PropTypes.string,
  }).isRequired,
  handleChange: PropTypes.func.isRequired,
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\FormFields.scss
Código:
@use "../../../styles/variables" as var;

.form-fields-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: 100%;
}

.ruta-navegacion {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px;

  border-radius: 8px;
  overflow-x: auto;
}

.btn-navegacion {
  background: none;
  border: none;
  color: var.$color-principal-estudio;
  cursor: pointer;
  font-size: 0.9rem;
  padding: 4px 8px;
  border-radius: 4px;
}

.btn-navegacion:hover {
  background-color: #e8eaf6;
}

.separador-ruta {
  color: #666;
  margin: 0 4px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.form-input {
  padding: 12px;
  border: 2px solid var.$color-principal-cliente;
  border-radius: 8px;
  font-size: 1rem;
  width: 100%;
  transition: all 0.3s ease;
  color: white;
}

.form-input:focus {
  outline: none;
  border-color: var.$color-principal-estudio;
}

.codigo-sugerido {
  color: white;
  font-size: 1rem;
  font-weight: 400;
}

.lista-categorias {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.categoria-item {
  padding: 12px;
  border-radius: 8px;
  border: 1px solid var.$color-principal-cliente;
}

.categoria-info {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 8px;
}

.categoria-codigo {
  color: var.$color-principal-cliente;
  font-weight: 600;
  margin-left: 10px;
}

.categoria-nombre {
  color: var.$color-principal-estudio;
  font-weight: 600;
}

.categoria-acciones {
  display: flex;
  gap: 8px;
  margin-top: 8px;
}

.btn-agregar-subcategoria,
.btn-navegar {
  background-color: var.$color-principal-estudio;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.btn-navegar {
  background-color: #2b3371;
}

.btn-agregar-subcategoria:hover,
.btn-navegar:hover {
  opacity: 0.9;
}

.lista-subcategorias {
  list-style: none;
  padding: 0;
  margin: 8px 0 0 24px;
}

.subcategoria-item {
  padding: 8px;

  border-radius: 6px;
  border: 1px solid var.$color-principal-cliente;
  margin-top: 8px;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\FormularioCategoria.jsx
Código:
import { useState } from "react";
import PropTypes from "prop-types";
import { Box, Alert } from "@mui/material";
import { FormFields } from "./FormFields";
import { createCategoria } from "../../../services/categoriasService";
import { INITIAL_FORM_STATE } from "../../../config/constants";
import { FaSave } from "react-icons/fa";
import "./FormularioCategoria.scss";

export const FormularioCategoria = ({ onCategoriaCreada, categorias }) => {
  const [formData, setFormData] = useState(INITIAL_FORM_STATE);
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      await createCategoria(formData);
      setFormData(INITIAL_FORM_STATE);
      onCategoriaCreada();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleChange = (e) => {
    const value =
      e.target.name === "nivel" ? Number(e.target.value) : e.target.value;
    setFormData({
      ...formData,
      [e.target.name]: value,
    });
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      className="formulario-categoria"
    >
      {error && (
        <Alert severity="error" className="alerta-error">
          {error}
        </Alert>
      )}

      {/* Botón centrado arriba */}
      <div className="icono-centrado">
        <FaSave
          className="icono-agregar"
          onClick={handleSubmit}
          title="Guardar categoría"
        />
      </div>

      <div className="input-container">
        <FormFields
          formData={formData}
          handleChange={handleChange}
          categorias={categorias || []}
        />
      </div>
    </Box>
  );
};

FormularioCategoria.propTypes = {
  onCategoriaCreada: PropTypes.func.isRequired,
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ),
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\FormularioCategoria.scss
Código:
@use "../../../styles/variables" as var;

.formulario-categoria {
  padding: 20px;
  background-color: transparent !important;
  box-shadow: none !important;
  text-align: center !important;
}

.icono-centrado {
  display: flex;
  justify-content: center;
  margin-bottom: 20px; /* Espacio entre el icono y el input */
}

.icono-agregar {
  font-size: 30px; /* Tamaño del icono */
  color: var.$color-principal-estudio;
  cursor: pointer;
  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;
}

.icono-agregar:hover {
  color: white; /* Cambia de color al pasar el mouse */
  transform: scale(1.3); /* Efecto de escala */
}

.icono-agregar:active {
  transform: scale(1); /* Reduce la escala al hacer clic */
}

.input-container {
  width: 100%; /* Asegura que el input ocupe todo el espacio disponible */
}

.alerta-error {
  color: #c62828 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: var.$color-fondo-estudio !important;
  border: 1px solid #c62828 !important;
}

.alerta-success {
  color: #2e7d32 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: black !important;
  border: 1px solid #2e7d32 !important;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\GestionCategorias.jsx
Código:
import { useState, useEffect } from "react";
import { Box, Paper, Alert, Snackbar } from "@mui/material";
import { FormularioCategoria } from "./FormularioCategoria";
import { ListaCategorias } from "./ListaCategorias";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import "./GestionCategorias.scss";
import { API_BASE_URL } from "../../../config/constants";

export const GestionCategorias = () => {
  const [categorias, setCategorias] = useState([]);
  const [notification, setNotification] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  const fetchCategorias = async () => {
    try {
      const response = await fetch(
        `${API_BASE_URL}/api/categorias-ingresos`
      );
      const data = await response.json();
      setCategorias(data);
    } catch (error) {
      console.error("Error al cargar categorías:", error);
      setNotification({
        open: true,
        message: "Error al cargar las categorías",
        severity: "error",
      });
    }
  };

  useEffect(() => {
    fetchCategorias();
  }, []);

  const handleCategoriaCreada = async () => {
    await fetchCategorias();
    setNotification({
      open: true,
      message: "Categoría creada exitosamente",
      severity: "success",
    });
  };

  const handleCloseNotification = () => {
    setNotification({ ...notification, open: false });
  };

  return (
    <>
      <div className="pagina-ingresos-container-1">
        <img src={logo} alt="Logo" className="ingresos-logo" />
        <img src={logo1} alt="Logo1" className="ingresos-logo-1" />
        <p className="ingresos-titulo">Registro de categorías</p>
      </div>
      <Box className="categorias-container">
        <Paper className="formulario-categoria">
          <FormularioCategoria
            onCategoriaCreada={handleCategoriaCreada}
            categorias={categorias}
          />
        </Paper>

        <Paper className="tabla-categorias">
          <ListaCategorias categorias={categorias} />
        </Paper>

        <Snackbar
          open={notification.open}
          autoHideDuration={6000}
          onClose={handleCloseNotification}
          anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          className="notification"
        >
          <Alert
            onClose={handleCloseNotification}
            severity={notification.severity}
            className={`alerta-${notification.severity}`}
          >
            {notification.message}
          </Alert>
        </Snackbar>
      </Box>
    </>
  );
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\GestionCategorias.scss
Código:
@use "../../../styles/variables" as var;

.pagina-ingresos-container-1 {
  display: flex; /* Flexbox para alinear elementos */
  align-items: center; /* Alinea verticalmente */
  justify-content: center; /* Centra horizontalmente */
  flex-wrap: wrap; /* Permite que los elementos se ajusten en caso de falta de espacio */
  text-align: center;
}

.notification {
  position: fixed;
  bottom: 24px;
  right: 24px;
  z-index: 1000;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\ListaCategorias.jsx
Código:
import PropTypes from "prop-types";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  Paper,
} from "@mui/material";
import "./ListaCategorias.scss";

export const ListaCategorias = ({ categorias }) => {
  const ordenarCategorias = (cats) => {
    const compararCodigos = (a, b) => {
      const partsA = a.codigo.split(".").map(Number);
      const partsB = b.codigo.split(".").map(Number);

      for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
        const numA = partsA[i] || 0;
        const numB = partsB[i] || 0;
        if (numA !== numB) return numA - numB;
      }
      return 0;
    };

    return [...cats].sort(compararCodigos);
  };

  const categoriasOrdenadas = ordenarCategorias(categorias);

  return (
    <>
      <Typography variant="h6" gutterBottom className="lista-categorias-titulo">
        Categorías Existentes
      </Typography>

      <TableContainer component={Paper} className="tabla-categorias">
        <Table>
          <TableHead>
            <TableRow>
              <TableCell className="tabla-header">Código</TableCell>
              <TableCell className="tabla-header">Nombre</TableCell>
              <TableCell className="tabla-header">Categoría Padre</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {categoriasOrdenadas.map((categoria) => (
              <TableRow key={categoria._id} className="tabla-row">
                <TableCell className="tabla-cell">{categoria.codigo}</TableCell>
                <TableCell className="tabla-cell">{categoria.nombre}</TableCell>
                <TableCell className="tabla-cell">
                  {categoria.categoriaPadre || "-"}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </>
  );
};

ListaCategorias.propTypes = {
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired, // Mantenemos esto porque se usa en otras partes
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\categorias\ListaCategorias.scss
Código:
@use "../../../styles/variables" as var;

.lista-categorias-titulo {
  color: var.$color-principal-estudio;
  font-weight: 600;
  margin-bottom: 0.8rem;
  text-align: center;
  padding-bottom: 10px;
}

.tabla-categorias {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: auto !important;
  max-width: 600px !important;
  margin: 0 auto !important;
  background-color: transparent !important;
}

.tabla-header {
  background-color: var.$color-principal-estudio !important;
  color: white !important;
  font-weight: 600 !important;
  font-size: 0.9rem !important;
  white-space: nowrap !important;
  padding: 12px 16px !important;
  border: 1px solid var.$color-principal-estudio !important;
}

.tabla-cell {
  color: white !important;
  font-size: 0.8rem !important;
  padding: 4px 16px !important;
  white-space: nowrap !important;
  border-bottom: 1px solid var.$color-principal-estudio !important;
}

/* Ajustes para el ancho de las columnas */
.tabla-header:first-child,
.tabla-cell:first-child {
  width: 20% !important; /* Columna código */
}

.tabla-header:nth-child(2),
.tabla-cell:nth-child(2) {
  width: 60% !important; /* Columna nombre */
}

.tabla-header:last-child,
.tabla-cell:last-child {
  width: 20% !important; /* Columna categoría padre - más pequeña */
  text-align: center !important; /* Centrar contenido */
}

/* Centrar el contenido de la celda de categoría padre */
.tabla-cell:last-child {
  text-align: center !important;
}

/* Asegurar que la tabla se mantenga compacta */
.MuiTable-root {
  min-width: unset !important;
}

/* Hacer que el contenedor de la tabla sea responsive */
@media (max-width: 700px) {
  .tabla-categorias {
    margin: 0 16px !important;
  }
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\Ingresos.jsx
Código:
import { useState, useEffect } from "react";
import logo from "../../assets/odontomed512_512.png";
import logo1 from "../../assets/odontomedBigLogo.png";
import "./Ingresos.scss";
import { FaPlusCircle, FaCashRegister } from "react-icons/fa";
import { Link } from "react-router-dom";
import { ListaCategorias } from "./categorias/ListaCategorias";
import { API_BASE_URL } from "../../config/constants";

export const Ingresos = () => {
  const [categorias, setCategorias] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCategorias = async () => {
      try {
        const response = await fetch(
          `${API_BASE_URL}/api/categorias-ingresos`
        );
        if (!response.ok) {
          throw new Error("Error al cargar las categorías");
        }
        const data = await response.json();
        setCategorias(data);
      } catch (err) {
        console.error("Error al cargar las categorías:", err);
        setError(err.message);
      }
    };

    fetchCategorias();
  }, []);

  return (
    <>
      <div className="pagina-ingresos-container">
        <img src={logo} alt="Logo" className="ingresos-logo" />
        <img src={logo1} alt="Logo1" className="ingresos-logo-1" />
        <p className="ingresos-titulo">Ingresos</p>
      </div>

      <div className="pagina-ingresos-container">
        <Link to="/registar-ingresos">
          <button className="btn-reg-ingresos">
            <FaCashRegister className="btn-ingresos-icon" />
            Registrar Ingresos
          </button>{" "}
        </Link>
        <Link to="/agregar-ingresos">
          <button className="btn-agregar-ingresos">
            <FaPlusCircle className="btn-ingresos-icon" />
            Agregar Categorías
          </button>
        </Link>
      </div>

      <div className="tabla-container">
        {error ? (
          <div className="error-message">{error}</div>
        ) : (
          <ListaCategorias categorias={categorias} />
        )}
      </div>
    </>
  );
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\Ingresos.scss
Código:
@use "../../styles/variables" as var;

/* Elimina el subrayado de todos los enlaces */
a {
  text-decoration: none; /* Elimina el subrayado */
}

.pagina-ingresos-container {
  display: flex; /* Flexbox para alinear elementos */
  align-items: center; /* Alinea verticalmente */
  justify-content: center; /* Centra horizontalmente */
  flex-wrap: wrap; /* Permite que los elementos se ajusten en caso de falta de espacio */
  text-align: center;
  margin: 20px 0; /* Espaciado vertical */
}

.ingresos-logo {
  width: 55px; /* Tamaño del primer logo */
  margin-right: 10px; /* Espacio entre los logos */
}

.ingresos-logo-1 {
  width: 180px; /* Tamaño del segundo logo */
  margin-left: 10px; /* Espacio entre los logos */
  margin-top: 10px;
}

.ingresos-titulo {
  font-size: 2.3rem;
  color: var.$color-principal-estudio; /* O cualquier color que desees */
  margin-top: 10px; /* Espaciado superior */
  margin-left: 25px;
  font-weight: 600;
}

.btn-reg-ingresos,
.btn-agregar-ingresos,
.btn-mostar-ingresos {
  display: flex; /* Flexbox para alinear icono y texto */
  align-items: center; /* Alinea icono y texto verticalmente */
  justify-content: flex-start; /* Icono y texto alineados al inicio */
  background-color: transparent; /* Fondo transparente */
  color: white;
  border: 2px solid; /* Borde visible */
  border-radius: 30px; /* Bordes redondeados */
  padding: 10px 15px;
  margin: 10px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-agregar-ingresos {
  border-color: white;
  background-color: black; /* Fondo suave */
  color: white; /* Color del texto */
  font-weight: 700;
}

.btn-agregar-ingresos:hover {
  background-color: white; /* Fondo más oscuro al pasar el cursor */
  color: black; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-reg-ingresos {
  border-color: var.$color-principal-estudio; /* Verde para ingresos */
  background-color: black; /* Fondo suave */
  color: var.$color-principal-estudio; /* Color del texto */
  font-weight: 700;
}

.btn-reg-ingresos:hover {
  background-color: var.$color-principal-estudio; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-mostar-ingresos {
  border-color: var.$color-principal-cliente; /* Rojo para gastos */
  background-color: black; /* Fondo suave */
  color: var.$color-principal-cliente; /* Color del texto */
  font-weight: 700;
}

.btn-mostar-ingresos:hover {
  background-color: var.$color-principal-cliente; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-ingresos-icon {
  margin-right: 10px; /* Espacio entre el icono y el texto */
  font-size: 1.5rem; /* Tamaño del icono */
  background-color: transparent; /* Fondo transparente */
}

.niveles-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.niveles-columnas-wrapper {
  display: flex;
  gap: 20px; /* Espacio entre columnas */
  width: 100%;
  justify-content: flex-start; /* Alineación horizontal de columnas */
}

.columna-niveles {
  display: flex;
  flex-direction: column;
  gap: 10px; /* Espacio entre niveles dentro de una columna */
}

.nivel {
  background-color: #1c1c1c; /* Fondo de cada nivel */
  color: white;
  padding: 10px;
  border-radius: 5px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.subniveles {
  margin-left: 20px; /* Desplazamiento de los subniveles */
  margin-top: 10px;
}

.btn-agregar-subnivel {
  background-color: transparent;
  color: white;
  border: 2px solid white;
  border-radius: 30px;
  padding: 5px 10px;
  cursor: pointer;
  font-size: 0.9rem;
}

.btn-agregar-subnivel:hover {
  background-color: white;
  color: black;
}

/* NIVELES  componente AgregarIngresos*/

.niveles-container {
  display: flex; /* Renderiza los niveles en columnas horizontales */
  flex-direction: row; /* Asegura que las columnas estén en fila */
  gap: 20px; /* Espacio entre columnas */
  align-items: flex-start; /* Alinea verticalmente al inicio */
  margin-top: 20px;
  width: 100%; /* Asegura que ocupe todo el ancho */
  margin-left: 20px;
}

.nivel-titulo {
  color: var.$color-principal-estudio; /* Borde visible */
  font-size: 1.2em;
  margin-left: 5px;
  margin-top: 0px;
}

.nivel-column {
  border: 1px solid var.$color-principal-estudio; /* Borde visible */
  padding: 2px;
  border-radius: 5px;
  width: auto; /* Ajusta el ancho de cada columna */
}

.nivel {
  display: flex; /* Coloca los elementos en línea */
  justify-content: space-between; /* Espacio entre nombre y botón */
  align-items: center;
  background-color: black; /* Fondo para cada nivel */
  color: white;
  padding: 10px;
  border-radius: 5px;
  transition: all 0.3s ease-in-out;
}

.nivel:hover {
  border: 1px solid var.$color-principal-estudio; /* Borde visible al pasar el cursor */
}

.nivel-opcion {
  cursor: pointer;
  padding: 5px;
  font-size: 1rem;
  display: inline-block;
  border-radius: 3px;
  transition: background-color 0.3s;
}

.nivel-opcion:hover {
  background-color: var.$color-principal-estudio;
  color: white;
}

.nivel-opcion.seleccionado {
  background-color: var.$color-principal-cliente;
  border-color: white;
  color: white;
}

.btn-agregar-subnivel {
  margin-left: 10px;
  background-color: var.$color-principal-estudio;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 5px 15px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease-in-out;
}

.btn-agregar-subnivel:hover {
  background-color: #2b8f7d;
  color: white;
}

.ingreso-seleccionado {
  margin-top: 10px;
  color: #2b8f7d;
  margin-left: 40px;
  font-size: 1.1em;
  font-weight: 500;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\registro\BotonesFormulario.jsx
Código:
import PropTypes from "prop-types";

export const BotonesFormulario = ({ onCancelar }) => {
  return (
    <div className="botones-formulario">
      <button type="button" className="boton-cancelar" onClick={onCancelar}>
        Cancelar
      </button>
      <button type="submit" className="boton-guardar">
        Guardar
      </button>
    </div>
  );
};

BotonesFormulario.propTypes = {
  onCancelar: PropTypes.func.isRequired,
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\registro\FormularioIngreso.jsx
Código:
import { useState } from "react";
import PropTypes from "prop-types";
import { EntradaMonetaria } from "../../comunes/EntradaMonetaria";
import { EntradaFecha } from "../../comunes/EntradaFecha";
import { RutaCategoria } from "./RutaCategoria";
import { BotonesFormulario } from "./BotonesFormulario";
import "./FormularioIngreso.scss";

export const FormularioIngreso = ({
  categoriaSeleccionada,
  rutaCompleta,
  onGuardar,
  onCancelar,
}) => {
  const [fecha, setFecha] = useState(new Date().toISOString().split("T")[0]);
  const [importe, setImporte] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!importe || parseFloat(importe) <= 0) {
      setError("El importe debe ser mayor a 0");
      return;
    }

    const ingresoData = {
      fecha,
      importe: parseFloat(importe),
      categoria: {
        codigo: categoriaSeleccionada.codigo,
        nombre: categoriaSeleccionada.nombre,
        rutaCategoria: rutaCompleta,
      },
    };

    try {
      await onGuardar(ingresoData);
    } catch (error) {
      console.error("Error en el formulario:", error);
      setError(error.message || "Error al guardar el ingreso");
    }
  };

  return (
    <div className="container-general">
      <div className="formulario-ingreso-container">
        <h2 className="formulario-titulo">Registrar Ingreso</h2>
        <RutaCategoria rutaCompleta={rutaCompleta} />
        {error && <div className="error-mensaje">{error}</div>}
        <form onSubmit={handleSubmit} className="formulario-ingreso">
          <div className="campos-inline">
            <div className="campo-formulario">
              <label htmlFor="fecha">Fecha:</label>
              <EntradaFecha
                id="fecha"
                valor={fecha}
                alCambiar={setFecha}
                requerido
              />
            </div>
            <div className="campo-formulario">
              <label htmlFor="importe">Importe:</label>
              <EntradaMonetaria
                valor={importe}
                alCambiar={setImporte}
                placeholder="0,00"
              />
            </div>
          </div>
          <BotonesFormulario onCancelar={onCancelar} />
        </form>
      </div>{" "}
    </div>
  );
};

FormularioIngreso.propTypes = {
  categoriaSeleccionada: PropTypes.shape({
    codigo: PropTypes.string.isRequired,
    nombre: PropTypes.string.isRequired,
  }).isRequired,
  rutaCompleta: PropTypes.arrayOf(
    PropTypes.shape({
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
    })
  ).isRequired,
  onGuardar: PropTypes.func.isRequired,
  onCancelar: PropTypes.func.isRequired,
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\registro\FormularioIngreso.scss
Código:
@use "../../../styles/variables" as var;

.container-general {
  margin-top: 120px;
}

.formulario-ingreso-container {
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.formulario-titulo {
  color: var.$color-principal-estudio;
  font-size: 1.8rem;
  margin-bottom: 20px;
  text-align: center;
}

.ruta-categoria {
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 20px;
  color: var.$color-principal-estudio;
  font-weight: 500;
  text-align: center;
}

.formulario-ingreso {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.campos-inline {
  display: flex;
  gap: 20px;
  justify-content: space-between;
}

.campo-formulario {
  flex: 1;
}

.campo-formulario label {
  display: block;
  color: var.$color-principal-cliente;
  font-size: 1rem;
  margin-bottom: 8px;
}

.campo-formulario input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  background-color: #fff;
}

.input-fecha {
  cursor: pointer;
  padding-right: 30px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 8px center;
  background-size: 16px;
}

.input-importe {
  text-align: right;
}

.campo-formulario input:focus {
  border-color: var.$color-principal-cliente;
  outline: none;
  box-shadow: 0 0 0 2px rgba(64, 181, 166, 0.2);
}

.botones-formulario {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.boton-cancelar,
.boton-guardar {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.boton-cancelar {
  background-color: #f5f5f5;
  color: #666;
}

.boton-guardar {
  background-color: var.$color-principal-cliente;
  color: white;
}

.boton-cancelar:hover {
  background-color: #e5e5e5;
}

.boton-guardar:hover {
  background-color: var.$color-principal-estudio;
}

/* Estilos para el calendario nativo */
input[type="date"]::-webkit-calendar-picker-indicator {
  opacity: 0;
  cursor: pointer;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

input[type="date"] {
  position: relative;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\registro\RegistroIngresos.jsx
Código:
import { useState } from "react";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import { createIngreso } from "../../../services/ingresosService";
import { FormularioIngreso } from "./FormularioIngreso";
import { useCategorias } from "../../../hooks/useCategorias";
import "./RegistroIngresos.scss";

export const RegistroIngresos = () => {
  const {
    rutaSeleccion,
    categoriasVisibles,
    cargando,
    error,
    esCategoriaNivelFinal,
    seleccionarCategoria,
    volverAtras,
    resetearSeleccion,
  } = useCategorias();

  const [mostrarFormulario, setMostrarFormulario] = useState(false);

  const handleSeleccionar = () => {
    if (rutaSeleccion.length > 0) {
      setMostrarFormulario(true);
    }
  };

  const handleGuardarIngreso = async (ingresoData) => {
    try {
      await createIngreso(ingresoData);
      setMostrarFormulario(false);
      resetearSeleccion();
    } catch (error) {
      console.error("Error al guardar el ingreso:", error);
    }
  };

  const handleCancelarIngreso = () => {
    setMostrarFormulario(false);
  };

  if (cargando) {
    return <div className="mensaje-carga">Cargando categorías...</div>;
  }

  if (error) {
    return <div className="mensaje-error">Error: {error}</div>;
  }

  if (mostrarFormulario) {
    return (
      <FormularioIngreso
        categoriaSeleccionada={rutaSeleccion[rutaSeleccion.length - 1]}
        rutaCompleta={rutaSeleccion}
        onGuardar={handleGuardarIngreso}
        onCancelar={handleCancelarIngreso}
      />
    );
  }

  const categoriaActual = rutaSeleccion[rutaSeleccion.length - 1];
  const mostrarBotonRegistrar =
    categoriaActual && esCategoriaNivelFinal(categoriaActual);

  return (
    <>
      <div className="pagina-ingresos-container-2">
        <img src={logo} alt="Logo" className="ingresos-logo" />
        <img src={logo1} alt="Logo1" className="ingresos-logo-1" />
        <p className="ingresos-registro-titulo">Registro de Ingresos</p>
      </div>
      <div className="seleccion-categorias-container">
        {rutaSeleccion.length > 0 && (
          <div className="ruta-navegacion">
            <button className="boton-volver" onClick={volverAtras}>
              ← Volver
            </button>
            <div className="ruta-seleccion">
              {rutaSeleccion.map((cat, index) => (
                <span key={cat.codigo} className="categoria-seleccionada">
                  {index > 0 ? " → " : ""}
                  {cat.nombre}
                </span>
              ))}
            </div>
            {mostrarBotonRegistrar && (
              <button className="boton-registrar" onClick={handleSeleccionar}>
                Registrar →
              </button>
            )}
          </div>
        )}
        <div className="grid-categorias">
          {categoriasVisibles.map((categoria) => (
            <button
              key={categoria.codigo}
              className="boton-categoria"
              onClick={() => seleccionarCategoria(categoria)}
            >
              {categoria.nombre}
            </button>
          ))}
        </div>
      </div>
    </>
  );
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\registro\RegistroIngresos.scss
Código:
@use "../../../styles/variables" as var;

.pagina-ingresos-container-2 {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
}

.ingresos-registro-titulo {
  font-size: 2.2rem;
  color: var.$color-principal-estudio;
  margin-top: 10px;
  margin-left: 25px;
  font-weight: 600;
}

/* este no esta asignado pero esta bueno 

.registro-ingresos-parrafo-1 {
  text-align: center;
  font-size: 1.3rem;
  color: #40b5a6;
  margin-top: 10px;
} */

.seleccion-categorias-container {
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  text-align: center;
}

.ruta-navegacion {
  display: flex;
  align-items: center;
  gap: 20px;
  margin: 20px 0;
  padding: 10px;
  border-radius: 5px;
}

.boton-volver {
  padding: 8px 16px;
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.boton-volver:hover {
  background-color: var.$color-principal-estudio;
  color: white;
}

.boton-registrar {
  padding: 8px 16px;
  background-color: var.$color-principal-estudio;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.boton-registrar:hover {
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
}

.ruta-seleccion {
  flex-grow: 1;
  font-size: 1.2rem;
}

.categoria-seleccionada {
  color: var.$color-principal-estudio;
  font-weight: 700;
}

.grid-categorias {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 20px;
}

.boton-categoria {
  padding: 5px;
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  transition: all 0.3s ease;
  width: 100%;
}

.boton-categoria:hover {
  background-color: var.$color-principal-estudio;
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  color: white;
}

.boton-categoria:active {
  transform: translateY(0);
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\ingresos\registro\RutaCategoria.jsx
Código:
import PropTypes from "prop-types";

export const RutaCategoria = ({ rutaCompleta }) => {
  return (
    <div className="ruta-categoria">
      {rutaCompleta.map((cat, index) => (
        <span key={cat.codigo}>
          {index > 0 ? " → " : ""}
          {cat.nombre}
        </span>
      ))}
    </div>
  );
};

RutaCategoria.propTypes = {
  rutaCompleta: PropTypes.arrayOf(
    PropTypes.shape({
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
    })
  ).isRequired,
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\NavBar.jsx
Código:
import { useState, useEffect } from "react";
import logo from "../assets/logoEstudio.png";
import logo1 from "../assets/logoEstudio1.png";
import whatsappIcon from "/whatsapp.png";
import { Link, useNavigate } from "react-router-dom";
import "../styles/NavBar.scss";
import { obtenerFechaActual } from "../utils/fechaActual";
import { Undo2, PhoneCall } from "lucide-react";

export const NavBar = () => {
  const [showContact, setShowContact] = useState(true);
  const [showDate, setShowDate] = useState(true);
  const [showLogo1, setShowLogo1] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    let timer;
    if (!showContact && !showDate) {
      timer = setTimeout(() => {
        setShowContact(true);
        setShowDate(true);
      }, 10000);
    }
    return () => clearTimeout(timer);
  }, [showContact, showDate]);

  useEffect(() => {
    const logoTimer = setInterval(() => {
      setShowLogo1((prevShowLogo1) => !prevShowLogo1);
    }, 20000); // Cambia el logo cada 20 segundos
    return () => clearInterval(logoTimer);
  }, []);

  const handleContactClick = () => {
    setShowContact(false);
    setShowDate(false);
  };

  const handleBackClick = () => {
    // Verifica si hay historial de navegación
    if (window.history.length > 2) {
      navigate(-1); // Vuelve a la página anterior
    } else {
      navigate("/"); // Redirige a la página principal si no hay historial
    }
  };

  return (
    <div>
      <nav className="navbar navbar-expand-lg justify-content-center">
        <span className="navbar-brand logo-container">
          {/* Logo que utiliza Link para redirigir siempre a la página principal */}
          <Link to="/">
            <img
              src={logo}
              className={`d-inline-block align-top logo-img ${
                showLogo1 ? "show" : ""
              }`}
              alt="logo"
            />
            <img
              src={logo1}
              className={`d-inline-block align-top logo-img ${
                showLogo1 ? "" : "show"
              }`}
              alt="logo1"
            />
          </Link>
        </span>
        <ul className="navbar-nav">
          {showContact ? (
            <li className="nav-item">
              <span className="button-contacto" onClick={handleContactClick}>
                <PhoneCall size={30} />
              </span>
            </li>
          ) : (
            <li className="nav-item">
              <img
                src={whatsappIcon}
                alt="whatsapp"
                className="whatsapp-icon"
              />
              <span className="telefono">(+54 9 388) 4781336</span>
            </li>
          )}

          <li className="nav-item-1">
            <button onClick={handleBackClick} className="button-volver">
              <Undo2 size={30} />
            </button>
          </li>
        </ul>
        {showDate && (
          <span className="fecha-actual"> {obtenerFechaActual()}</span>
        )}
      </nav>
    </div>
  );
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\components\PaginaInicial.jsx
Código:
import logo from "../assets/odontomed512_512.png";
import logo1 from "../assets/odontomedBigLogo.png";
import "../styles/PaginaInicial.scss";
import { FaDollarSign, FaMoneyBillWave } from "react-icons/fa";
import { Link } from "react-router-dom"; // Importa Link de react-router-dom

export const PaginaInicial = () => {
  return (
    <>
      <div className="pagina-inicial-container">
        <img src={logo} alt="Logo" className="pagina-inicial-logo" />
        <img src={logo1} alt="Logo1" className="pagina-inicial-logo-1" />
        <p className="pag-ini-titulo">Flujo de Fondos</p>
      </div>
      <div className="pagina-inicial-container">
        <Link to="/ingresos">
          <button className="btn-ingresos">
            <FaDollarSign className="btn-icon" />
            Ingresos
          </button>
        </Link>
        <button className="btn-gastos">
          <FaMoneyBillWave className="btn-icon" />
          Gastos
        </button>
      </div>
    </>
  );
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\config\constants.js
Código:
export const API_BASE_URL = import.meta.env.VITE_API_URL || "https://caja-om.estudiobeguier.com:5006";

export const INITIAL_FORM_STATE = {
    codigo: "",
    nombre: "",
    nivel: 1,
    categoriaPadre: "",
};

Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\hooks\useCategorias.js
Código:
import { useState, useEffect } from "react";
import { getCategorias } from "../services/categoriasService";

export const useCategorias = () => {
  const [categorias, setCategorias] = useState([]);
  const [rutaSeleccion, setRutaSeleccion] = useState([]);
  const [categoriasVisibles, setCategoriasVisibles] = useState([]);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const obtenerCategorias = async () => {
      try {
        const data = await getCategorias();
        setCategorias(data);
        const categoriasPrincipales = data.filter((cat) => !cat.categoriaPadre);
        setCategoriasVisibles(categoriasPrincipales);
      } catch (err) {
        setError(err.message);
      } finally {
        setCargando(false);
      }
    };
    obtenerCategorias();
  }, []);

  const esCategoriaNivelFinal = (categoria) => {
    return !categorias.some((cat) => cat.categoriaPadre === categoria.codigo);
  };

  const seleccionarCategoria = (categoriaSeleccionada) => {
    const nuevaRuta = [...rutaSeleccion, categoriaSeleccionada];
    setRutaSeleccion(nuevaRuta);

    const subcategorias = categorias.filter(
      (cat) => cat.categoriaPadre === categoriaSeleccionada.codigo
    );

    setCategoriasVisibles(subcategorias);
  };

  const volverAtras = () => {
    if (rutaSeleccion.length > 0) {
      const nuevaRuta = rutaSeleccion.slice(0, -1);
      setRutaSeleccion(nuevaRuta);

      if (nuevaRuta.length === 0) {
        const categoriasPrincipales = categorias.filter(
          (cat) => !cat.categoriaPadre
        );
        setCategoriasVisibles(categoriasPrincipales);
      } else {
        const categoriaAnterior = nuevaRuta[nuevaRuta.length - 1];
        const subcategorias = categorias.filter(
          (cat) => cat.categoriaPadre === categoriaAnterior.codigo
        );
        setCategoriasVisibles(subcategorias);
      }
    }
  };

  const resetearSeleccion = () => {
    setRutaSeleccion([]);
    const categoriasPrincipales = categorias.filter(
      (cat) => !cat.categoriaPadre
    );
    setCategoriasVisibles(categoriasPrincipales);
  };

  return {
    categorias,
    rutaSeleccion,
    categoriasVisibles,
    cargando,
    error,
    esCategoriaNivelFinal,
    seleccionarCategoria,
    volverAtras,
    resetearSeleccion,
  };
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\main.jsx
Código:
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";

import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.bundle.min.js";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <App />
  </StrictMode>
);


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\services\categoriasService.js
Código:
import { API_BASE_URL } from "../config/constants";

export const createCategoria = async (categoriaData) => {
  const response = await fetch(`${API_BASE_URL}/api/categorias-ingresos`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(categoriaData),
  });

  if (!response.ok) {
    const data = await response.json();
    throw new Error(data.mensaje || "Error al crear la categoría");
  }

  return response.json();
};
export const getCategorias = async () => {
  const response = await fetch(`${API_BASE_URL}/api/categorias-ingresos`);

  if (!response.ok) {
    const data = await response.json();
    throw new Error(data.mensaje || "Error al obtener las categorías");
  }

  return response.json();
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\services\ingresosService.js
Código:
import { API_BASE_URL } from "../config/constants";

export const createIngreso = async (ingresoData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/ingresos`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(ingresoData),
    });

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al procesar la solicitud");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al crear el ingreso");
  }
};


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\styles\Footer.scss
Código:
@use "variables" as var;

.footer-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.parrafo-footer {
  color: white;
  margin: 0px;
  text-align: center;
  font-weight: 500;
}

.parrafo-footer sup {
  vertical-align: baseline;
  position: relative;
  top: -0.4em; /* Ajusta este valor según necesites */
  font-size: 75%; /* Ajusta este valor según necesites */
  margin-left: -0.01em; /* Ajusta para reducir el espacio antes del sup */
  margin-right: -0.01em; /* Ajusta para reducir el espacio después del sup */
}

.img-footer {
  margin: 3px;
  padding: 1px;
  border-radius: 5px;
  width: 50px;
}

@media (max-width: 480px) {
  .img-footer {
    margin: 3px;
    padding: 1px;
    border-radius: 5px;
    width: 50px;
  }
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\styles\NavBar.scss
Código:
@use "variables" as var;

* {
  padding: 0;
}

body {
  margin-top: 90px;
}

.navbar {
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 100;
}

.navbar-brand {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.nav-item-1 {
  margin-left: 10px;
  margin-right: 10px;
}

.whatsapp-icon {
  width: 40px; /* o el tamaño que prefieras para tu icono */
}

.button-contacto {
  color: var.$color-principal-estudio; /* text-white */
  font-weight: bold; /* font-bold */
  padding: 0.2rem 0.3rem; /* py-2 px-4 */
  border-radius: 0.25rem; /* rounded */
  display: flex; /* flex */
  align-items: center; /* items-center */
  border: none;
  cursor: pointer;
}

.button-contacto:hover {
  color: #a2a9e2; /* hover:bg-red-700 */
}

.button-contacto-icon {
  height: 1.25rem; /* h-5 */
  width: 1.25rem; /* w-5 */
}

.button-volver {
  color: var.$color-principal-estudio; /* text-white */
  font-weight: bold; /* font-bold */
  padding: 0.2rem 0.3rem; /* py-2 px-4 */
  border-radius: 0.25rem; /* rounded */
  display: flex; /* flex */
  align-items: center; /* items-center */
  border: none;
  cursor: pointer;
}

.button-volver:hover {
  color: #a2a9e2; /* hover:bg-red-700 */
}

.button-volver-icon {
  height: 1.25rem; /* h-5 */
  width: 1.25rem; /* w-5 */
}

.telefono {
  color: white;
  font-weight: 600;
  font-size: 1.1rem;
  margin-left: 10px;
}

.fecha-actual {
  margin: 5px;
  padding: 10px;
  font-size: 15px;
  color: white;
  font-weight: 600;
}

.logo-container {
  position: relative;
  width: 335px; /* Ajusta el tamaño según sea necesario */
  height: 70px; /* Ajusta el tamaño según sea necesario */
}

.logo-img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: opacity 20s ease-in-out; /* Transición suave y lenta de 20 segundos */
}

.logo-img.show {
  opacity: 1;
}

/* ------------------ MEDIA QUERIES PARA RESPONSIVIDAD ------------------ */

/* Para pantallas menores a 768px (tablets) */
@media (max-width: 994px) {
  .navbar {
    padding: 10px;
    flex-wrap: nowrap; /* Asegura que los elementos no se rompan en varias líneas */
  }

  .whatsapp-icon {
    width: 30px;
  }

  .telefono {
    font-size: 1rem;
  }

  .logo-container {
    width: 250px;
    height: 55px;
  }

  .fecha-actual {
    display: none; /* Oculta la fecha en pantallas menores de 768px */
  }
}

@media (max-width: 990px) {
  .navbar {
    padding: 5px;
    flex-wrap: nowrap; /* Asegura que los elementos no se rompan en varias líneas */
  }
  .button-login {
    /* Botón INICIO */
    display: none; /* Oculta los botones INICIO y VOLVER en pantallas menores de 480px */
  }
  .telefono {
    font-size: 0.9rem;
  }
}

@media (max-width: 500px) {
  .telefono {
    font-size: 0.8rem;
  }
}

@media (max-width: 450px) {
  .telefono {
    font-size: 0.7rem;
  }
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\styles\PaginaInicial.scss
Código:
@use "variables" as var;

/* Elimina el subrayado de todos los enlaces */
a {
  text-decoration: none; /* Elimina el subrayado */
}

.pagina-inicial-container {
  display: flex; /* Flexbox para alinear elementos */
  align-items: center; /* Alinea verticalmente */
  justify-content: center; /* Centra horizontalmente */
  flex-wrap: wrap; /* Permite que los elementos se ajusten en caso de falta de espacio */
  text-align: center;
  margin: 20px 0; /* Espaciado vertical */
}

.pagina-inicial-logo {
  width: 60px; /* Tamaño del primer logo */
  margin-right: 10px; /* Espacio entre los logos */
}

.pagina-inicial-logo-1 {
  width: 200px; /* Tamaño del segundo logo */
  margin-left: 10px; /* Espacio entre los logos */
  margin-top: 7px;
}

.pag-ini-titulo {
  font-size: 2.3rem;
  color: var.$color-principal-estudio; /* O cualquier color que desees */
  margin-top: 10px; /* Espaciado superior */
  margin-left: 50px;
  font-weight: 600;
}

.btn-ingresos,
.btn-gastos {
  display: flex; /* Flexbox para alinear icono y texto */
  align-items: center; /* Alinea icono y texto verticalmente */
  justify-content: flex-start; /* Icono y texto alineados al inicio */
  background-color: transparent; /* Fondo transparente */
  color: white;
  border: 2px solid; /* Borde visible */
  border-radius: 30px; /* Bordes redondeados */
  padding: 10px 15px;
  margin: 10px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-ingresos {
  border-color: var.$color-principal-estudio; /* Verde para ingresos */
  background-color: black; /* Fondo suave */
  color: var.$color-principal-estudio; /* Color del texto */
  font-weight: 700;
}

.btn-ingresos:hover {
  background-color: var.$color-principal-estudio; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-gastos {
  border-color: #40b5a6; /* Rojo para gastos */
  background-color: black; /* Fondo suave */
  color: #40b5a6; /* Color del texto */
  font-weight: 700;
}

.btn-gastos:hover {
  background-color: #40b5a6; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-icon {
  margin-right: 10px; /* Espacio entre el icono y el texto */
  font-size: 1.5rem; /* Tamaño del icono */
  background-color: transparent; /* Fondo transparente */
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\styles\_variables.scss
Código:
$color-fondo-estudio: #050014;

$color-principal-estudio: #3e499c;

$color-principal-cliente: #40b5a6;


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\src\utils\fechaActual.js
Código:
export function obtenerFechaActual() {
  const dias = [
    "Domingo",
    "Lunes",
    "Martes",
    "Miércoles",
    "Jueves",
    "Viernes",
    "Sábado",
  ];
  const meses = [
    "enero",
    "febrero",
    "marzo",
    "abril",
    "mayo",
    "junio",
    "julio",
    "agosto",
    "septiembre",
    "octubre",
    "noviembre",
    "diciembre",
  ];

  const fechaActual = new Date();
  const diaSemana = dias[fechaActual.getDay()];
  const diaMes = fechaActual.getDate();
  const mes = meses[fechaActual.getMonth()];
  const anio = fechaActual.getFullYear();

  return `${diaSemana}, ${diaMes} de ${mes} de ${anio}`;
}


Archivo: C:\Users\SebaHero\Desktop\ALBERTO BEGUIER\FlujoDeCajaOdontomed-main\vite.config.js
Código:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})


